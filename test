<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>科學申論題練習工具</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://unpkg.com/html2pdf.js/dist/html2pdf.bundle.min.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: '#5D5CDE',
                    },
                    animation: {
                        'bounce-slow': 'bounce 2s infinite',
                        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
                        'thinking': 'thinking 2s infinite'
                    },
                    keyframes: {
                        thinking: {
                            '0%, 100%': { 
                                transform: 'scale(0.8)', 
                                opacity: '0.5' 
                            },
                            '50%': { 
                                transform: 'scale(1)', 
                                opacity: '1' 
                            }
                        }
                    }
                }
            }
        }

        // Check for dark mode preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });
    </script>
    <style>
        /* 表格編輯樣式 */
        #data-input-table .editable-cell {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        
        #data-input-table .editable-cell:hover {
            background-color: rgba(93, 92, 222, 0.1);
        }
        
        #data-input-table .editable-cell.editing {
            padding: 0;
            background-color: rgba(93, 92, 222, 0.2);
        }
        
        #data-input-table .cell-input {
            width: 100%;
            height: 100%;
            border: none;
            padding: 0.5rem 0.75rem;
            background-color: transparent;
            outline: 2px solid #5D5CDE;
        }
        
        .dark #data-input-table .editable-cell:hover {
            background-color: rgba(93, 92, 222, 0.2);
        }
        
        .dark #data-input-table .editable-cell.editing {
            background-color: rgba(93, 92, 222, 0.3);
        }
        
        /* 表格標題列樣式 */
        #data-input-table .header-row {
            background-color: rgba(93, 92, 222, 0.1);
        }
        
        .dark #data-input-table .header-row {
            background-color: rgba(93, 92, 222, 0.2);
        }
        
        #data-input-table .header-row .editable-cell {
            font-weight: 600;
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 min-h-screen">
    <div class="container mx-auto p-4 max-w-4xl">
        <div class="my-8">
            <h1 class="text-3xl font-bold text-center text-primary mb-8">科學申論題練習工具</h1>
            
            <div class="mb-8 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                <div class="flex flex-col md:flex-row md:space-x-4 space-y-4 md:space-y-0 mb-4">
                    <div class="w-full md:w-1/2">
                        <label for="unit-select" class="block text-sm font-medium mb-1">選擇單元</label>
                        <select id="unit-select" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md text-base focus:outline-none focus:ring-2 focus:ring-primary dark:bg-gray-700">
                            <option value="">載入中...</option>
                        </select>
                    </div>
                    <div class="w-full md:w-1/2">
                        <label for="topic-select" class="block text-sm font-medium mb-1">選擇題目</label>
                        <select id="topic-select" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md text-base focus:outline-none focus:ring-2 focus:ring-primary dark:bg-gray-700" disabled>
                            <option value="">請先選擇單元</option>
                        </select>
                    </div>
                </div>
            </div>

            <div id="topic-container" class="hidden mb-8 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                <div class="flex justify-between items-start mb-4">
                    <h2 id="current-topic-title" class="text-xl font-semibold"></h2>
                    <span id="topic-type-badge" class="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"></span>
                </div>
                <div id="current-topic-description" class="mb-4 whitespace-pre-wrap"></div>
                <div id="topic-media-container" class="mb-4 hidden">
                    <div id="topic-image-container" class="hidden">
                        <img id="topic-image" class="max-w-full max-h-96 object-contain mx-auto border dark:border-gray-700 rounded-md" src="" alt="題目相關圖片">
                    </div>
                    
                    <!-- 互動程式 iframe 容器 -->
                    <div id="iframe-container" class="hidden">
                        <div class="relative bg-black rounded-md" style="min-height: 400px;" id="iframe-aspect-container">
                            <!-- iframe 會在這裡載入 -->
                            <iframe id="embedded-iframe" class="w-full h-full border dark:border-gray-700 rounded-md" 
                                    style="min-height: 400px; height: 600px;" 
                                    src="" sandbox="allow-scripts allow-same-origin allow-forms" 
                                    allow="clipboard-write" allowfullscreen></iframe>
                            
                            <!-- iframe 載入遮罩 -->
                            <div id="iframe-overlay" class="absolute inset-0 flex flex-col items-center justify-center bg-black bg-opacity-70 p-4 text-white rounded-md">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-4 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                                <h3 class="text-lg font-semibold mb-2">互動內容需要額外權限</h3>
                                <p class="text-sm text-center mb-4">此題目包含互動式程式，需要您的許可才能載入</p>
                                <div class="space-y-4 w-full max-w-md">
                                    <button id="load-iframe-btn" class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
                                        載入互動內容
                                    </button>
                                    <div class="text-xs text-center text-gray-300">
                                        或者，您可以直接在新視窗中打開：<br>
                                        <a id="external-iframe-link" href="" target="_blank" class="text-blue-400 hover:underline break-all"></a>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- iframe 控制列 -->
                            <div id="iframe-controls" class="absolute bottom-0 right-0 flex bg-gray-800 bg-opacity-70 p-1 rounded-tl-md z-10 hidden">
                                <button id="iframe-size-smaller" class="p-1 text-white hover:bg-gray-700 rounded" title="縮小">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                    </svg>
                                </button>
                                <button id="iframe-size-larger" class="p-1 text-white hover:bg-gray-700 rounded" title="放大">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                                    </svg>
                                </button>
                                <button id="iframe-fullscreen" class="p-1 text-white hover:bg-gray-700 rounded" title="全螢幕">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- YouTube 影片容器 -->
                    <div id="video-container" class="hidden">
                        <div class="relative bg-black rounded-md" style="padding-bottom: 56.25%;">
                            <!-- YouTube iframe 會在這裡載入 -->
                            <iframe id="youtube-iframe" class="absolute inset-0 w-full h-full border dark:border-gray-700 rounded-md" 
                                    src="" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                                    
                            <!-- YouTube 載入遮罩 -->
                            <div id="video-overlay" class="absolute inset-0 flex flex-col items-center justify-center bg-black bg-opacity-70 p-4 text-white rounded-md">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-4 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <h3 class="text-lg font-semibold mb-2">YouTube 影片</h3>
                                <p class="text-sm text-center mb-4">此題目包含 YouTube 影片，需要您的許可才能載入</p>
                                <div class="space-y-4 w-full max-w-md">
                                    <button id="load-video-btn" class="w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition">
                                        載入 YouTube 影片
                                    </button>
                                    <div class="text-xs text-center text-gray-300">
                                        或者，您可以直接在新視窗中觀看：<br>
                                        <a id="external-video-link" href="" target="_blank" class="text-blue-400 hover:underline break-all"></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 外部連結容器 -->
                    <div id="external-link-container" class="hidden mt-2 text-center">
                        <p class="text-sm text-gray-600 dark:text-gray-400 mb-1">此題目包含外部媒體連結：</p>
                        <a id="external-media-link" href="" target="_blank" class="text-blue-600 dark:text-blue-400 hover:underline break-all text-sm"></a>
                    </div>
                </div>
                <div class="flex space-x-3 mb-3">
                    <!-- 提示按鈕 -->
                    <button id="show-hint-btn" class="text-blue-600 dark:text-blue-400 hover:underline text-sm flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        顯示提示
                    </button>
                    <!-- 評分標準按鈕 (初始隱藏) -->
                    <button id="show-criteria-btn" class="text-primary hover:underline text-sm hidden">顯示評分標準</button>
                </div>
                <!-- 提示容器 -->
                <div id="hint-container" class="mb-3 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-md hidden">
                    <h3 class="font-medium mb-2 text-blue-700 dark:text-blue-400">提示：</h3>
                    <div id="hint-content" class="whitespace-pre-wrap text-blue-800 dark:text-blue-300"></div>
                </div>
                <!-- 評分標準容器 -->
                <div id="grading-criteria-container" class="mt-2 p-4 bg-gray-100 dark:bg-gray-700 rounded-md hidden">
                    <h3 class="font-medium mb-2">評分標準：</h3>
                    <div id="grading-criteria" class="whitespace-pre-wrap"></div>
                </div>
            </div>

            <div id="answer-container" class="hidden mb-8 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                <!-- 數據表格容器 - 初始隱藏 -->
                <div id="data-table-container" class="mb-6 hidden">
                    <label class="block text-sm font-medium mb-3">實驗數據表格</label>
                    <div class="overflow-x-auto">
                        <table id="data-input-table" class="min-w-full divide-y divide-gray-300 dark:divide-gray-600 border border-gray-300 dark:border-gray-700">
                            <!-- 表格內容將由JavaScript動態生成 -->
                        </table>
                    </div>
                    <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                        點擊任意儲存格即可編輯內容，所有表格內容都可編輯包括表頭。表格數據會與您的文字答案一起提交。
                    </div>
                </div>
                
                <div class="mb-4">
                    <label for="student-answer" class="block text-sm font-medium mb-1">您的答案</label>
                    <textarea id="student-answer" rows="8" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md text-base focus:outline-none focus:ring-2 focus:ring-primary dark:bg-gray-700"></textarea>
                    <div class="flex justify-between mt-2">
                        <div id="word-count" class="text-sm text-gray-600 dark:text-gray-400">字數：0</div>
                        <div id="word-limit-display" class="text-sm text-gray-600 dark:text-gray-400">限制：未設定</div>
                    </div>
                </div>
                <div class="flex space-x-4">
                    <button id="save-draft-btn" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition">儲存草稿</button>
                    <button id="submit-answer-btn" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-opacity-90 transition">提交答案</button>
                </div>
            </div>
            
            <div id="feedback-container" class="hidden mb-8 bg-white dark:bg-gray-800 rounded-lg shadow p-6">
                <h2 class="text-xl font-semibold mb-4">評分結果</h2>
                <div class="mb-4">
                    <div class="text-center mb-4">
                        <span id="grade-display" class="inline-block text-5xl font-bold p-4 rounded-full w-16 h-16 flex items-center justify-center bg-gray-100 dark:bg-gray-700">-</span>
                    </div>
                    <div id="comment-container" class="mb-4 p-4 bg-gray-100 dark:bg-gray-700 rounded-md">
                        <h3 class="font-medium mb-2">總評：</h3>
                        <div id="comment-display" class="whitespace-pre-wrap">等待評分...</div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="p-4 bg-green-50 dark:bg-green-900/20 rounded-md">
                            <h3 class="font-medium mb-2 text-green-700 dark:text-green-400">優點：</h3>
                            <ul id="strengths-list" class="list-disc pl-5 space-y-1">
                                <li>等待評分...</li>
                            </ul>
                        </div>
                        <div class="p-4 bg-amber-50 dark:bg-amber-900/20 rounded-md">
                            <h3 class="font-medium mb-2 text-amber-700 dark:text-amber-400">改進建議：</h3>
                            <ul id="improvements-list" class="list-disc pl-5 space-y-1">
                                <li>等待評分...</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="flex space-x-4">
                    <button id="retry-btn" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-opacity-90 transition">重新作答</button>
                    <button id="export-pdf-btn" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition">匯出 PDF</button>
                </div>
            </div>

            <div id="pdf-content" class="hidden">
                <!-- Content for PDF export will be generated here -->
            </div>
        </div>

        <!-- 基本載入畫面 (用於一般載入操作) -->
        <div id="basic-loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg text-center">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
                <div id="basic-loading-message">處理中，請稍候...</div>
            </div>
        </div>

        <!-- AI分析載入畫面 (用於評分過程) -->
        <div id="ai-loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg text-center max-w-md">
                <div class="flex justify-center items-center mb-4">
                    <div class="relative">
                        <!-- AI Icon -->
                        <div class="h-16 w-16 rounded-full bg-primary flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-1-7a1 1 0 112 0v1h-2v-1zm0-5a1 1 0 112 0v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <!-- Thinking Animation -->
                        <div class="absolute -top-2 -right-2">
                            <div class="flex space-x-1">
                                <div class="h-3 w-3 bg-primary rounded-full animate-thinking" style="animation-delay: 0s"></div>
                                <div class="h-3 w-3 bg-primary rounded-full animate-thinking" style="animation-delay: 0.3s"></div>
                                <div class="h-3 w-3 bg-primary rounded-full animate-thinking" style="animation-delay: 0.6s"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <h3 class="text-lg font-semibold mb-2" id="ai-status">AI 老師正在閱讀您的答案</h3>
                <div id="ai-loading-message" class="text-gray-600 dark:text-gray-300">請稍候，正在分析內容...</div>
                <div class="mt-4 text-left">
                    <div id="analysis-steps" class="space-y-2 text-sm">
                        <div class="flex items-center">
                            <div id="step1-icon" class="w-5 h-5 mr-2 text-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" class="animate-pulse-slow" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 000-12v12z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <span>閱讀答案與題目內容</span>
                        </div>
                        <div class="flex items-center opacity-40">
                            <div id="step2-icon" class="w-5 h-5 mr-2 text-gray-400">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 000-12v12z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <span>依照評分標準進行評估</span>
                        </div>
                        <div class="flex items-center opacity-40">
                            <div id="step3-icon" class="w-5 h-5 mr-2 text-gray-400">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 000-12v12z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <span>找出優點與需改進之處</span>
                        </div>
                        <div class="flex items-center opacity-40">
                            <div id="step4-icon" class="w-5 h-5 mr-2 text-gray-400">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm0-2a6 6 0 000-12v12z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <span>評定等級與撰寫總評</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // AI Prompt template
        const AI_PROMPT = `你是一位科學申論題的評分專家。請依照以下標準評估學生的答案，注意學生的程度是國中生：

你會仔細閱讀從網站資料庫中提供的評分標準，其中包含A、B、C和F等第的描述。根據這些評分標準，對照學生的答案，給予適當的等第評價並提供具體的回饋與建議。

請注意，如果學生回答問題的內容，與「題目主題」和「題目內容」無關的話，你會回應給予F的評價，不給任何的優點，並在改進建議上告訴學生「你的回答與題目主題或題目內容無關，請重新作答，根據題目主題回答問題」

請給予以下回饋：
1. 優點：列出答案的3個優點
2. 改進建議：列出可以改進的2-3個方向
3. 等級評定：根據評分標準給予A、B、C或F的評級
4. 評語：一段總結性評語

題目是：{{question}}
評分標準是：{{example}}
學生答案是：{{answer}}
請以JSON格式回覆，包含strengths（優點陣列）、improvements（改進建議陣列）、grade（等級）和comment（評語）欄位。`;

        // Google Sheet資料來源URL
        const GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbyDmd-ldJQfLNh3s8POwDmpRtHmepAdAzMDGgb0oOWf3L2x4NXKvUdF4kX8PIAevIM/exec";
        
        // 後備測試數據，僅在API請求失敗時使用
        const testData = [
            {
                "題型": "科學原理描述",
                "單元": "生物光合作用",
                "題目主題": "光合作用",
                "題目內容": "請用氧氣、二氧化碳、葡萄糖、水、光合作用、葉綠素、植物、陽光、養分、澱粉等詞彙，描述植物進行光合作用的過程。",
                "外部媒體連結網址": "",
                "參考答案": "植物透過光合作用將二氧化碳和水轉化為葡萄糖和氧氣。當陽光照射植物時，葉綠素能夠吸收光能，將水和二氧化碳結合形成葡萄糖，成為植物的養分，多餘的養分可以轉化為澱粉儲存起來，作為植物的能量儲備。"
            },
            {
                "題型": "實驗結果描述",
                "單元": "基礎化學",
                "題目主題": "加熱升溫曲線",
                "題目內容": "請觀看這一份水溫溫度與加熱時間的關係圖，以文字描述實驗結果。",
                "外部媒體連結網址": "https://i.imgur.com/tnfdRR3.png",
                "參考答案": "這是加熱水時溫度與時間的關係，一開始的水溫是25度，加熱時溫度穩定上升，平均每分鐘溫度上升3度，加熱到5分鐘後，溫度到達40度"
            },
            {
                "題型": "實驗數據記錄",
                "單元": "物理測量",
                "題目主題": "密度測量",
                "題目內容": "請記錄不同物體的質量與體積測量結果，並計算其密度。\n\n[表格 rows=8]\n欄位1：物體\n欄位2：質量(g)\n欄位3：體積(cm³)\n欄位4：密度(g/cm³)\n[/表格]\n\n請根據實驗數據解釋質量與體積的關係，以及如何判斷未知物質的成分。",
                "參考答案": "從表格數據可以看出，不同物質的密度各不相同，這是物質的特性之一。密度計算方式為質量除以體積。"
            },
            {
                "題型": "實驗數據記錄與分析",
                "單元": "化學反應",
                "題目主題": "加熱質量變化",
                "題目內容": "請記錄不同物質在加熱前後的質量變化。\n\n[表格]\n欄位1：加熱前質量(g)\n欄位2：加熱後質量(g)\n欄位3：質量差(g)\n[/表格]\n\n根據數據分析加熱對物質質量的影響，並說明可能的原因。",
                "參考答案": "加熱可能導致物質中的水分蒸發或揮發性物質釋放，使質量減少。也可能因為氧化反應使質量增加。"
            }
        ];

        // Application state
        let appState = {
            units: [],
            topics: [],
            currentTopic: null,
            currentAnswer: '',
            feedback: null,
            drafts: {},
            aiAnalysisStep: 0, // 追蹤AI分析的階段
            aiAnalysisInterval: null // 用於動畫的計時器
        };

        // DOM Elements
        const elements = {
            // Topic Selection Elements
            unitSelect: document.getElementById('unit-select'),
            topicSelect: document.getElementById('topic-select'),
            
            // Topic Display Elements
            topicContainer: document.getElementById('topic-container'),
            currentTopicTitle: document.getElementById('current-topic-title'),
            topicTypeBadge: document.getElementById('topic-type-badge'),
            currentTopicDescription: document.getElementById('current-topic-description'),
            topicMediaContainer: document.getElementById('topic-media-container'),
            topicImageContainer: document.getElementById('topic-image-container'),
            topicImage: document.getElementById('topic-image'),
            topicVideoContainer: document.getElementById('topic-video-container'),
            topicVideo: document.getElementById('topic-video'),
            showHintBtn: document.getElementById('show-hint-btn'),
            hintContainer: document.getElementById('hint-container'),
            hintContent: document.getElementById('hint-content'),
            showCriteriaBtn: document.getElementById('show-criteria-btn'),
            gradingCriteriaContainer: document.getElementById('grading-criteria-container'),
            gradingCriteria: document.getElementById('grading-criteria'),
            
            // Answer Elements
            answerContainer: document.getElementById('answer-container'),
            dataTableContainer: document.getElementById('data-table-container'),
            dataInputTable: document.getElementById('data-input-table'),
            studentAnswer: document.getElementById('student-answer'),
            wordCount: document.getElementById('word-count'),
            wordLimitDisplay: document.getElementById('word-limit-display'),
            saveDraftBtn: document.getElementById('save-draft-btn'),
            submitAnswerBtn: document.getElementById('submit-answer-btn'),
            
            // Feedback Elements
            feedbackContainer: document.getElementById('feedback-container'),
            gradeDisplay: document.getElementById('grade-display'),
            commentDisplay: document.getElementById('comment-display'),
            strengthsList: document.getElementById('strengths-list'),
            improvementsList: document.getElementById('improvements-list'),
            retryBtn: document.getElementById('retry-btn'),
            exportPdfBtn: document.getElementById('export-pdf-btn'),
            pdfContent: document.getElementById('pdf-content'),
            
            // 基本載入畫面
            basicLoadingOverlay: document.getElementById('basic-loading-overlay'),
            basicLoadingMessage: document.getElementById('basic-loading-message'),
            
            // AI分析載入畫面
            aiLoadingOverlay: document.getElementById('ai-loading-overlay'),
            aiLoadingMessage: document.getElementById('ai-loading-message'),
            aiStatus: document.getElementById('ai-status'),
            
            // AI Analysis Steps Elements
            analysisSteps: document.getElementById('analysis-steps'),
            step1Icon: document.getElementById('step1-icon'),
            step2Icon: document.getElementById('step2-icon'),
            step3Icon: document.getElementById('step3-icon'),
            step4Icon: document.getElementById('step4-icon')
        };

        // 普通載入畫面（用於一般操作）
        function showBasicLoading(message = '處理中，請稍候...') {
            elements.basicLoadingMessage.textContent = message;
            elements.basicLoadingOverlay.classList.remove('hidden');
        }

        function hideBasicLoading() {
            elements.basicLoadingOverlay.classList.add('hidden');
        }

        // AI評分載入畫面（用於評分過程）
        function showAiLoading(message = '正在評分，請稍候...') {
            elements.aiLoadingMessage.textContent = message;
            elements.aiLoadingOverlay.classList.remove('hidden');
        }

        function hideAiLoading() {
            elements.aiLoadingOverlay.classList.add('hidden');
            // 停止分析階段動畫
            if (appState.aiAnalysisInterval) {
                clearInterval(appState.aiAnalysisInterval);
                appState.aiAnalysisInterval = null;
            }
            // 重置分析階段
            appState.aiAnalysisStep = 0;
        }

        // 新增函數：啟動AI分析動畫
        function startAIAnalysisAnimation() {
            // 重置分析階段
            appState.aiAnalysisStep = 0;
            
            // 設置初始狀態 - 所有步驟都是不活躍的
            const steps = Array.from(elements.analysisSteps.children);
            steps.forEach((step, index) => {
                step.classList.add('opacity-40');
                const iconElement = document.getElementById(`step${index+1}-icon`);
                iconElement.classList.remove('text-primary', 'animate-pulse-slow');
                iconElement.classList.add('text-gray-400');
            });
            
            // 設置第一個步驟為活躍
            steps[0].classList.remove('opacity-40');
            elements.step1Icon.classList.remove('text-gray-400');
            elements.step1Icon.classList.add('text-primary', 'animate-pulse-slow');
            
            // 更新狀態文字
            elements.aiStatus.textContent = "AI 老師正在閱讀您的答案";
            elements.aiLoadingMessage.textContent = "請稍候，正在分析內容...";
            
            // 啟動階段轉換的計時器
            const stepMessages = [
                { status: "AI 老師正在閱讀您的答案", message: "正在分析內容結構和關鍵概念..." },
                { status: "AI 老師正在進行評估", message: "正在與評分標準進行比對..." },
                { status: "AI 老師正在整理回饋", message: "正在找出關鍵優缺點..." },
                { status: "AI 老師即將完成評分", message: "正在撰寫總評與評定等級..." }
            ];
            
            // 清除任何現有計時器
            if (appState.aiAnalysisInterval) {
                clearInterval(appState.aiAnalysisInterval);
            }
            
            // 設置新的計時器，每3秒切換到下一個階段
            appState.aiAnalysisInterval = setInterval(() => {
                // 更新前一個階段
                if (appState.aiAnalysisStep > 0) {
                    const prevStep = steps[appState.aiAnalysisStep - 1];
                    prevStep.classList.add('opacity-80');
                    prevStep.classList.remove('opacity-40');
                    
                    // 更新圖標 - 完成的步驟使用勾選圖標
                    const prevIconElement = document.getElementById(`step${appState.aiAnalysisStep}-icon`);
                    prevIconElement.classList.remove('animate-pulse-slow');
                    prevIconElement.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="text-green-500" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                    `;
                }
                
                // 更新當前階段
                appState.aiAnalysisStep++;
                
                // 如果已完成所有階段，停止
                if (appState.aiAnalysisStep >= steps.length) {
                    clearInterval(appState.aiAnalysisInterval);
                    appState.aiAnalysisInterval = null;
                    return;
                }
                
                // 更新當前階段為活躍
                const currentStep = steps[appState.aiAnalysisStep];
                currentStep.classList.remove('opacity-40');
                
                const iconElement = document.getElementById(`step${appState.aiAnalysisStep+1}-icon`);
                iconElement.classList.remove('text-gray-400');
                iconElement.classList.add('text-primary', 'animate-pulse-slow');
                
                // 更新狀態文字
                elements.aiStatus.textContent = stepMessages[appState.aiAnalysisStep].status;
                elements.aiLoadingMessage.textContent = stepMessages[appState.aiAnalysisStep].message;
                
            }, 3000); // 每3秒切換一次階段
        }

        function countWords(str) {
            return str.trim().length;
        }

        // Process data
        function processData(data) {
            // 記錄原始數據以便調試
            console.log('原始數據:', data);
            
            // Extract unique units
            const uniqueUnits = [...new Set(data.map(row => row['單元']).filter(Boolean))];
            
            // Create unit objects
            appState.units = uniqueUnits.map(unit => ({
                id: unit,
                name: unit
            }));
            
            // Process topics
            appState.topics = data.map((row, index) => {
                let mediaType = 'none';
                // 使用正確的欄位名稱（外部媒體連結網址）
                let mediaUrl = row['外部媒體連結網址'] || '';
                
                // 檢查是否是 data:image 格式（來自於 Google Sheet 中直接插入的圖片，已處理為 Base64）
                if (mediaUrl && mediaUrl.startsWith('data:image/')) {
                    mediaType = 'image';
                    console.log('偵測到 Base64 編碼的圖片');
                } 
                // 檢查是否為 valueType=IMAGE 格式（Google Sheet 中直接插入的圖片，但尚未處理為 Base64）
                else if (mediaUrl && typeof mediaUrl === 'object' && mediaUrl.valueType === 'IMAGE') {
                    mediaType = 'image';
                    // 設置一個預設值，實際上這張圖片無法顯示，需要提示用戶
                    mediaUrl = '';
                    console.log('偵測到未處理的 Google Sheet 圖片對象');
                }
                // 檢查是否有 iframe 標籤並從中提取 URL
                else if (mediaUrl && mediaUrl.includes('<iframe') && mediaUrl.includes('src=')) {
                    const srcMatch = mediaUrl.match(/src=["'](.*?)["']/i);
                    if (srcMatch && srcMatch[1]) {
                        mediaUrl = srcMatch[1];
                        console.log('從 iframe 提取的 URL:', mediaUrl);
                    }
                }
                
                if (mediaUrl && mediaType === 'none') {
                    // 識別媒體類型（當不是 data:image 時）
                    if (mediaUrl.match(/\.(jpg|jpeg|png|gif|webp)$/i) || mediaUrl.includes('imgur.com')) {
                        mediaType = 'image';
                    } else if (mediaUrl.match(/youtube\.com|youtu\.be/i)) {
                        // YouTube 視頻使用特殊處理
                        mediaType = 'video';
                    // 移除了 Scratch 項目處理邏輯
                    // Scratch 項目 URL 將被視為一般 iframe 或外部連結
                    } else if (mediaUrl.match(/^(http|https):\/\//i)) {
                        // 判斷是否為可嵌入的URL
                        // 這裡可以添加更多判斷邏輯，目前將網址都視為可嵌入
                        mediaType = 'iframe';
                    } else {
                        mediaType = 'external'; // 其他非URL格式
                    }
                }
                
                // 解析表格配置信息
                let tableConfig = null;
                
                // 從題目內容中解析表格定義
                const description = row['題目內容'] || '';
                let cleanDescription = description;
                
                if (description.includes('[表格') && description.includes('[/表格]')) {
                    try {
                        // 解析表格參數（如rows）
                        const tableStartMatch = description.match(/\[表格(?:\s+rows=(\d+))?\]/i);
                        const rows = tableStartMatch && tableStartMatch[1] ? parseInt(tableStartMatch[1]) : 6; // 預設6列（包含標題行）
                        
                        // 提取表格定義部分
                        const tableDefMatch = description.match(/\[表格.*?\]([\s\S]*?)\[\/表格\]/);
                        if (tableDefMatch && tableDefMatch[1]) {
                            const tableDefContent = tableDefMatch[1].trim();
                            const columnDefs = [];
                            
                            // 解析每一行的欄位定義
                            const lines = tableDefContent.split('\n');
                            for (const line of lines) {
                                const trimmedLine = line.trim();
                                if (trimmedLine.startsWith('欄位') && trimmedLine.includes('：')) {
                                    const parts = trimmedLine.split('：');
                                    if (parts.length >= 2) {
                                        const columnTitle = parts.slice(1).join('：').trim();
                                        columnDefs.push(columnTitle);
                                    }
                                }
                            }
                            
                            // 如果找到欄位定義，創建表格配置
                            if (columnDefs.length > 0) {
                                tableConfig = {
                                    rows: rows, // 使用解析到的rows值或預設6列
                                    cols: columnDefs.length,
                                    headers: true,
                                    colLabels: columnDefs
                                };
                                console.log('從題目內容解析的表格配置:', tableConfig);
                                
                                // 移除題目內容中的表格標記，以避免重複顯示
                                cleanDescription = description.replace(/\[表格.*?\]([\s\S]*?)\[\/表格\]/g, '');
                            }
                        }
                    } catch (e) {
                        console.error('解析題目內容中的表格定義時出錯:', e);
                    }
                }
                // 如果題目內容沒有表格定義，則檢查題型
                else if (row['題型'] === '實驗數據記錄' || row['題型'] === '實驗數據記錄與分析') {
                    // 如果是實驗數據題型，嘗試從「表格配置」字段解析配置
                    if (row['表格配置'] && typeof row['表格配置'] === 'string') {
                        try {
                            // 嘗試解析表格配置，例如: {"rows":4,"cols":3,"headers":true}
                            tableConfig = JSON.parse(row['表格配置']);
                        } catch (e) {
                            console.error('解析表格配置時出錯:', e);
                            // 使用預設配置
                            tableConfig = {
                                rows: 6, // 預設6列 (1個標題行 + 5個數據行)
                                cols: 3,
                                headers: true,
                                colLabels: ['欄位1', '欄位2', '欄位3']
                            };
                        }
                    } else {
                        // 使用預設配置
                        tableConfig = {
                            rows: 6, // 預設6列 (1個標題行 + 5個數據行)
                            cols: 3,
                            headers: true,
                            colLabels: ['欄位1', '欄位2', '欄位3']
                        };
                    }
                }
                
                return {
                    id: `topic-${index}`,
                    // 使用「題目主題」作為標題
                    title: row['題目主題'] || `題目 ${index + 1}`,
                    type: row['題型'] || '科學原理描述',
                    unit: row['單元'] || '',
                    // 使用清理後的題目內容作為描述
                    description: cleanDescription.trim(),
                    // 保存原始題目內容，方便在需要時使用
                    originalDescription: description,
                    mediaUrl: mediaUrl,
                    mediaType: mediaType,
                    exampleAnswer: row['評分標準'] || '',
                    // 新增提示欄位
                    hint: row['提示'] || '',
                    hasSubmitted: false, // 記錄用戶是否提交過答案
                    wordLimit: 0,
                    // 新增表格配置
                    tableConfig: tableConfig,
                    // 表格數據 (會在使用時初始化)
                    tableData: null
                };
            });
            
            console.log('Processed units:', appState.units);
            console.log('Processed topics:', appState.topics);
        }

        // Initialize UI
        function initializeUI() {
            // Load saved drafts
            loadDrafts();
            
            // Populate unit dropdown
            populateUnitDropdown();
        }

        // 在 Poe 環境中無法使用 localStorage，改用內存儲存
        function loadDrafts() {
            // Poe Canvas 應用不支援 localStorage，只使用記憶體中的草稿
            appState.drafts = appState.drafts || {};
            console.log('初始化草稿系統（僅記憶體儲存）');
        }

        // 僅保存到內存，Poe 環境不支援 localStorage
        function saveDraftsToStorage() {
            // 由於 Poe Canvas 的限制，草稿只能在當前會話中保存
            // 不嘗試使用 localStorage
            
            // 顯示保存訊息，但提醒用戶關於限制
            const savedMessage = document.createElement('div');
            savedMessage.className = 'fixed bottom-4 right-4 bg-blue-500 text-white py-2 px-4 rounded-md shadow-lg z-50';
            savedMessage.innerHTML = `草稿已暫存！<span class="block text-xs mt-1">（僅在本次使用期間有效）</span>`;
            document.body.appendChild(savedMessage);
            
            // 2秒後移除訊息
            setTimeout(() => {
                savedMessage.remove();
            }, 2000);
        }

        // Populate Unit Dropdown
        function populateUnitDropdown() {
            elements.unitSelect.innerHTML = '<option value="">請選擇單元</option>';
            
            appState.units.forEach(unit => {
                const option = document.createElement('option');
                option.value = unit.id;
                option.textContent = unit.name;
                elements.unitSelect.appendChild(option);
            });
        }

        // Load Topics by Unit
        function loadTopicsByUnit(unitId) {
            const unitTopics = appState.topics.filter(topic => topic.unit === unitId);
            
            elements.topicSelect.innerHTML = '<option value="">請選擇題目</option>';
            unitTopics.forEach(topic => {
                const option = document.createElement('option');
                option.value = topic.id;
                option.textContent = topic.title;
                elements.topicSelect.appendChild(option);
            });
            
            elements.topicSelect.disabled = false;
        }

        // 創建可編輯表格
        function createDataTable(config) {
            const table = elements.dataInputTable;
            table.innerHTML = ''; // 清空表格
            
            // 初始化表格數據 (如果還未初始化)
            if (!appState.currentTopic.tableData) {
                const rows = config.rows || 6; // 預設6列 (1個標題列 + 5個數據列)
                const cols = config.cols || 3; // 預設3欄
                const data = [];
                
                // 準備列標籤 (欄位名稱)
                const colLabels = config.colLabels && config.colLabels.length > 0 
                    ? [...config.colLabels] 
                    : Array(cols).fill('').map((_, i) => `欄位${i+1}`);
                
                // 填充表格數據
                for (let i = 0; i < rows; i++) {
                    const rowData = [];
                    if (i === 0) {
                        // 第一列是標題行，使用欄位名稱
                        rowData.push(...colLabels);
                    } else {
                        // 其他列初始為空
                        for (let j = 0; j < cols; j++) {
                            rowData.push('');
                        }
                    }
                    data.push(rowData);
                }
                
                appState.currentTopic.tableData = data;
            }
            
            // 創建表格
            const data = appState.currentTopic.tableData;
            const rows = data.length;
            const cols = data[0].length;
            
            // 創建表格主體
            const tbody = document.createElement('tbody');
            tbody.className = 'divide-y divide-gray-300 dark:divide-gray-600';
            
            for (let i = 0; i < rows; i++) {
                const tr = document.createElement('tr');
                tr.className = i === 0 ? 'header-row' : 'bg-white dark:bg-gray-800';
                
                for (let j = 0; j < cols; j++) {
                    const td = document.createElement('td');
                    td.className = 'px-4 py-3 border-r border-gray-300 dark:border-gray-600 text-center editable-cell';
                    td.textContent = data[i][j];
                    td.dataset.row = i;
                    td.dataset.col = j;
                    
                    // 對於所有儲存格添加編輯功能
                    td.addEventListener('click', function() {
                        // 如果已經在編輯中，不再創建新的輸入框
                        if (this.classList.contains('editing')) return;
                        
                        const value = this.textContent;
                        const row = parseInt(this.dataset.row);
                        const col = parseInt(this.dataset.col);
                        
                        // 標記儲存格正在編輯
                        this.classList.add('editing');
                        
                        // 清空儲存格內容
                        this.textContent = '';
                        
                        // 創建輸入框
                        const input = document.createElement('input');
                        input.type = 'text';
                        input.className = 'cell-input text-center dark:bg-gray-800 dark:text-gray-200';
                        input.value = value;
                        this.appendChild(input);
                        
                        // 自動聚焦輸入框
                        input.focus();
                        
                        // 處理點擊區域外或按下Enter鍵時保存數據
                        function handleBlur() {
                            // 更新數據
                            appState.currentTopic.tableData[row][col] = input.value;
                            
                            // 更新儲存格顯示
                            td.textContent = input.value;
                            
                            // 移除編輯狀態
                            td.classList.remove('editing');
                            
                            // 移除事件監聽器
                            input.removeEventListener('blur', handleBlur);
                            input.removeEventListener('keypress', handleKeyPress);
                        }
                        
                        function handleKeyPress(e) {
                            if (e.key === 'Enter') {
                                handleBlur();
                            }
                        }
                        
                        input.addEventListener('blur', handleBlur);
                        input.addEventListener('keypress', handleKeyPress);
                    });
                    
                    tr.appendChild(td);
                }
                
                tbody.appendChild(tr);
            }
            
            table.appendChild(tbody);
            
            // 顯示表格容器
            elements.dataTableContainer.classList.remove('hidden');
        }

        // Load Topic
        function loadTopic(topicId) {
            const topic = appState.topics.find(t => t.id === topicId);
            if (!topic) return;
            
            appState.currentTopic = topic;
            
            // Display topic title and type
            elements.currentTopicTitle.textContent = topic.title;
            elements.topicTypeBadge.textContent = topic.type;
            elements.currentTopicDescription.textContent = topic.description;
            
            // Handle media
            elements.topicMediaContainer.classList.add('hidden');
            elements.topicImageContainer.classList.add('hidden');
            
            // 獲取外部連結容器和iframe容器
            const externalLinkContainer = document.getElementById('external-link-container');
            const externalMediaLink = document.getElementById('external-media-link');
            const iframeContainer = document.getElementById('iframe-container');
            const embeddedIframe = document.getElementById('embedded-iframe');
            const iframeOverlay = document.getElementById('iframe-overlay');
            const externalIframeLink = document.getElementById('external-iframe-link');
            const loadIframeBtn = document.getElementById('load-iframe-btn');
            
            // 隱藏所有媒體容器
            if (externalLinkContainer) externalLinkContainer.classList.add('hidden');
            if (iframeContainer) iframeContainer.classList.add('hidden');
            
            if (topic.mediaType === 'image') {
                if (topic.mediaUrl) {
                    // 處理圖片
                    elements.topicImage.src = topic.mediaUrl;
                    elements.topicImageContainer.classList.remove('hidden');
                    elements.topicMediaContainer.classList.remove('hidden');
                } else {
                    // 處理 valueType=IMAGE 格式但沒有實際 URL 的情況
                    // 顯示一個提示訊息
                    elements.topicImageContainer.innerHTML = `
                        <div class="p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-md text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mx-auto mb-2 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                            <h3 class="font-medium mb-1 text-yellow-700 dark:text-yellow-400">圖片處理提醒</h3>
                            <p class="text-sm mb-2 text-yellow-800 dark:text-yellow-300">
                                系統檢測到此題目包含 Google Sheet 中插入的圖片，但尚未正確轉換。
                            </p>
                            <p class="text-xs text-yellow-600 dark:text-yellow-400 mt-2">
                                請確認 Apps Script 已正確部署並授權訪問 Google Sheets 中的圖片。
                            </p>
                        </div>
                    `;
                    elements.topicImageContainer.classList.remove('hidden');
                    elements.topicMediaContainer.classList.remove('hidden');
                }
            } else if (topic.mediaType === 'video' && topic.mediaUrl) {
                // 處理YouTube視頻 - 使用縮略圖和直接連結，而不是嵌入式iframe
                const videoContainer = document.getElementById('video-container');
                const videoOverlay = document.getElementById('video-overlay');
                const externalVideoLink = document.getElementById('external-video-link');
                
                if (videoContainer && videoOverlay && externalVideoLink) {
                    let videoId = extractYouTubeId(topic.mediaUrl);
                    let directYoutubeUrl = videoId ? `https://www.youtube.com/watch?v=${videoId}` : topic.mediaUrl;
                    
                    // 設置直接連結
                    externalVideoLink.href = directYoutubeUrl;
                    externalVideoLink.textContent = directYoutubeUrl;
                    
                    // 顯示只有縮略圖和直接連結的介面
                    videoOverlay.style.display = 'flex';
                    
                    // 如果能獲取到videoId，顯示YouTube縮略圖
                    if (videoId) {
                        // 更新覆蓋層內容，顯示YouTube縮略圖和直接鏈接
                        videoOverlay.innerHTML = `
                            <div class="text-center max-w-md">
                                <div class="relative mx-auto mb-4 bg-black rounded-md" style="max-width: 480px;">
                                    <!-- YouTube 縮略圖 -->
                                    <img src="https://img.youtube.com/vi/${videoId}/0.jpg" 
                                         alt="YouTube 影片縮略圖" 
                                         class="w-full h-auto rounded-md object-cover" 
                                         style="aspect-ratio: 16/9;" />
                                    
                                    <!-- 播放按鈕浮層 -->
                                    <div class="absolute inset-0 flex items-center justify-center">
                                        <div class="text-red-600 bg-white bg-opacity-80 rounded-full p-3 shadow-lg hover:bg-opacity-100 transition-all transform hover:scale-110">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="currentColor" viewBox="0 0 24 24">
                                                <path d="M4.5 4.5a1 1 0 00-1 1v13a1 1 0 001.74.67L16 12 4.5 4.5z" />
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mb-3 text-lg font-semibold">YouTube 影片</div>
                                <p class="mb-4 text-sm">由於安全限制，影片無法直接嵌入顯示</p>
                                
                                <a href="${directYoutubeUrl}" target="_blank" 
                                   class="px-4 py-2 bg-red-600 text-white rounded-md inline-block hover:bg-red-700 transition">
                                    在 YouTube 中觀看
                                </a>
                                
                                <div class="mt-3 text-xs text-gray-400">
                                    <span class="block">影片連結：</span>
                                    <a href="${directYoutubeUrl}" target="_blank" class="text-blue-400 hover:underline break-all">
                                        ${directYoutubeUrl}
                                    </a>
                                </div>
                            </div>
                        `;
                    } else {
                        // 如果無法獲取videoId，顯示一般的YouTube圖標
                        videoOverlay.innerHTML = `
                            <div class="text-center max-w-md">
                                <div class="mx-auto mb-6 text-red-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20 mx-auto" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"></path>
                                    </svg>
                                </div>
                                
                                <div class="mb-3 text-lg font-semibold">YouTube 影片</div>
                                <p class="mb-4 text-sm">由於安全限制，影片無法直接嵌入顯示</p>
                                
                                <a href="${directYoutubeUrl}" target="_blank" 
                                   class="px-4 py-2 bg-red-600 text-white rounded-md inline-block hover:bg-red-700 transition">
                                    在 YouTube 中觀看
                                </a>
                                
                                <div class="mt-3 text-xs text-gray-400">
                                    <span class="block">影片連結：</span>
                                    <a href="${directYoutubeUrl}" target="_blank" class="text-blue-400 hover:underline break-all">
                                        ${directYoutubeUrl}
                                    </a>
                                </div>
                            </div>
                        `;
                    }
                    
                    // 顯示視頻容器
                    videoContainer.classList.remove('hidden');
                    elements.topicMediaContainer.classList.remove('hidden');
                }
            } else if (topic.mediaUrl && topic.mediaUrl.includes('scratch.mit.edu')) {
                // 處理含有 Scratch 項目的 URL - 將其作為一般外部連結處理
                if (externalLinkContainer && externalMediaLink) {
                    // 設置外部連結
                    externalMediaLink.href = topic.mediaUrl;
                    externalMediaLink.textContent = topic.mediaUrl;
                    
                    // 顯示外部連結容器
                    externalLinkContainer.classList.remove('hidden');
                    elements.topicMediaContainer.classList.remove('hidden');
                    
                    // 顯示通知訊息
                    const notificationDiv = document.createElement('div');
                    notificationDiv.className = 'mt-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-md text-center text-sm text-yellow-800 dark:text-yellow-300';
                    notificationDiv.textContent = '請注意：Scratch 項目需要在官方網站中查看，請點擊上方連結在新視窗中開啟。';
                    externalLinkContainer.appendChild(notificationDiv);
                }
            } else if (topic.mediaType === 'iframe' && topic.mediaUrl) {
                // 處理嵌入式iframe
                if (iframeContainer && embeddedIframe && externalIframeLink) {
                    // 設置iframe的初始值但不載入內容
                    embeddedIframe.removeAttribute('src'); // 先移除src避免自動加載
                    
                    // 設置直接連結
                    externalIframeLink.href = topic.mediaUrl;
                    externalIframeLink.textContent = topic.mediaUrl;
                    
                    // 顯示覆蓋層並添加載入按鈕事件
                    if (iframeOverlay && loadIframeBtn) {
                        iframeOverlay.style.display = 'flex';
                        
                        // 移除舊事件監聽器
                        const newLoadBtn = loadIframeBtn.cloneNode(true);
                        loadIframeBtn.parentNode.replaceChild(newLoadBtn, loadIframeBtn);
                        
                        // 添加新事件監聽器
                        newLoadBtn.addEventListener('click', () => {
                            // 點擊按鈕後載入iframe內容
                            embeddedIframe.src = topic.mediaUrl;
                            iframeOverlay.style.display = 'none';
                            
                            // 顯示控制列
                            const iframeControls = document.getElementById('iframe-controls');
                            if (iframeControls) {
                                iframeControls.classList.remove('hidden');
                                
                                // 添加控制列事件處理
                                setupIframeControls();
                            }
                        });
                        
                        // 設置iframe控制按鈕
                        function setupIframeControls() {
                            const embeddedIframe = document.getElementById('embedded-iframe');
                            const smallerBtn = document.getElementById('iframe-size-smaller');
                            const largerBtn = document.getElementById('iframe-size-larger');
                            const fullscreenBtn = document.getElementById('iframe-fullscreen');
                            
                            if (!embeddedIframe || !smallerBtn || !largerBtn || !fullscreenBtn) return;
                            
                            // 移除舊事件
                            const newSmallerBtn = smallerBtn.cloneNode(true);
                            const newLargerBtn = largerBtn.cloneNode(true);
                            const newFullscreenBtn = fullscreenBtn.cloneNode(true);
                            
                            smallerBtn.parentNode.replaceChild(newSmallerBtn, smallerBtn);
                            largerBtn.parentNode.replaceChild(newLargerBtn, largerBtn);
                            fullscreenBtn.parentNode.replaceChild(newFullscreenBtn, fullscreenBtn);
                            
                            // 縮小按鈕
                            newSmallerBtn.addEventListener('click', () => {
                                const currentHeight = parseInt(embeddedIframe.style.height);
                                if (currentHeight > 300) {
                                    embeddedIframe.style.height = (currentHeight - 100) + 'px';
                                }
                            });
                            
                            // 放大按鈕
                            newLargerBtn.addEventListener('click', () => {
                                const currentHeight = parseInt(embeddedIframe.style.height) || 600;
                                embeddedIframe.style.height = (currentHeight + 100) + 'px';
                            });
                            
                            // 全螢幕按鈕 (打開在新視窗)
                            newFullscreenBtn.addEventListener('click', () => {
                                const url = embeddedIframe.src;
                                if (url) {
                                    window.open(url, '_blank');
                                }
                            });
                        }
                    }
                    
                    // 顯示iframe容器
                    iframeContainer.classList.remove('hidden');
                    elements.topicMediaContainer.classList.remove('hidden');
                }
            } else if (topic.mediaType === 'external' && topic.mediaUrl) {
                // 處理外部連結
                if (externalLinkContainer && externalMediaLink) {
                    // 顯示連結
                    externalMediaLink.href = topic.mediaUrl;
                    externalMediaLink.textContent = topic.mediaUrl;
                    externalLinkContainer.classList.remove('hidden');
                    elements.topicMediaContainer.classList.remove('hidden');
                }
            }
            
            // 設置提示內容
            elements.hintContent.textContent = topic.hint || '此題目沒有提供提示';
            elements.hintContainer.classList.add('hidden'); // 初始隱藏提示內容
            
            // 根據是否有提示決定是否顯示提示按鈕
            if (topic.hint && topic.hint.trim() !== '') {
                elements.showHintBtn.classList.remove('hidden');
            } else {
                elements.showHintBtn.classList.add('hidden');
            }
            
            // 設置評分標準
            elements.gradingCriteria.textContent = topic.exampleAnswer || '無評分標準';
            elements.gradingCriteriaContainer.classList.add('hidden');
            
            // 根據是否已提交過答案決定是否顯示評分標準按鈕
            if (topic.hasSubmitted) {
                elements.showCriteriaBtn.classList.remove('hidden');
            } else {
                elements.showCriteriaBtn.classList.add('hidden');
            }
            
            // Set word limit
            elements.wordLimitDisplay.textContent = topic.wordLimit ? `限制：${topic.wordLimit}字` : '限制：未設定';
            
            // Load draft if exists
            if (appState.drafts[topicId]) {
                elements.studentAnswer.value = appState.drafts[topicId];
            } else {
                elements.studentAnswer.value = '';
            }
            updateWordCount();
            
            // 處理數據表格 - 如果題目有表格配置就顯示表格
            if (topic.tableConfig) {
                // 創建數據表格
                createDataTable(topic.tableConfig);
            } else {
                // 隱藏數據表格
                elements.dataTableContainer.classList.add('hidden');
            }
            
            // Show containers
            elements.topicContainer.classList.remove('hidden');
            elements.answerContainer.classList.remove('hidden');
            elements.feedbackContainer.classList.add('hidden');
        }

        // Update Word Count
        function updateWordCount() {
            const count = countWords(elements.studentAnswer.value);
            elements.wordCount.textContent = `字數：${count}`;
            
            const limit = appState.currentTopic?.wordLimit || 0;
            if (limit && count > limit) {
                elements.wordCount.classList.add('text-red-500');
            } else {
                elements.wordCount.classList.remove('text-red-500');
            }
        }

        // Save Draft
        function saveDraft() {
            if (!appState.currentTopic) return;
            
            appState.drafts[appState.currentTopic.id] = elements.studentAnswer.value;
            saveDraftsToStorage();
            
            // Show saved message
            const savedMessage = document.createElement('div');
            savedMessage.className = 'fixed bottom-4 right-4 bg-green-500 text-white py-2 px-4 rounded-md shadow-lg z-50';
            savedMessage.textContent = '草稿已儲存！';
            document.body.appendChild(savedMessage);
            
            // Remove message after 2 seconds
            setTimeout(() => {
                savedMessage.remove();
            }, 2000);
        }

        // 準備提交答案（包含表格數據和文字答案）
        function prepareSubmissionData() {
            if (!appState.currentTopic) return '';
            
            let completeAnswer = '';
            
            // 如果有表格數據，將其格式化為文本
            if (appState.currentTopic.tableData) {
                const tableData = appState.currentTopic.tableData;
                completeAnswer += '實驗數據表格：\n\n';
                
                // 將表格數據轉換為 Markdown 格式的表格
                for (let i = 0; i < tableData.length; i++) {
                    const row = tableData[i];
                    completeAnswer += '| ' + row.join(' | ') + ' |\n';
                    
                    // 添加表格分隔行
                    if (i === 0) {
                        completeAnswer += '| ' + row.map(() => '---').join(' | ') + ' |\n';
                    }
                }
                
                completeAnswer += '\n\n';
            }
            
            // 添加學生的文字答案
            completeAnswer += elements.studentAnswer.value;
            
            return completeAnswer;
        }

        // Submit Answer
        async function submitAnswer() {
            if (!appState.currentTopic) {
                alert('請選擇題目');
                return;
            }
            
            // 檢查是否至少有表格數據或文字答案
            const hasTableData = appState.currentTopic.tableData && 
                                appState.currentTopic.tableData.some(row => row.some(cell => cell.trim() !== ''));
            
            const hasTextAnswer = elements.studentAnswer.value.trim() !== '';
            
            if (!hasTableData && !hasTextAnswer) {
                alert('請輸入您的答案');
                return;
            }
            
            // 準備完整答案
            const completeAnswer = prepareSubmissionData();
            appState.currentAnswer = completeAnswer;
            
            // Update draft
            appState.drafts[appState.currentTopic.id] = elements.studentAnswer.value;
            saveDraftsToStorage();
            
            // 啟動AI分析動畫並顯示loading
            showAiLoading('正在評分，請稍候...');
            startAIAnalysisAnimation();
            
            try {
                await evaluateAnswer(appState.currentTopic, completeAnswer);
            } catch (error) {
                console.error('Evaluation error:', error);
                alert('評分過程發生錯誤，請稍後再試');
                hideAiLoading();
            }
        }

        // Register the handler for Claude's response
        window.Poe.registerHandler("evaluation-handler", (result, context) => {
            if (result.status === "error") {
                hideAiLoading();
                alert("評分過程發生錯誤：" + (result.responses[0]?.statusText || "未知錯誤"));
                return;
            }
            
            if (result.status === "complete") {
                const response = result.responses[0];
                
                try {
                    // Extract the JSON from Claude's response
                    let jsonString = response.content;
                    
                    // Handle if Claude wrapped the JSON in code blocks
                    if (jsonString.includes("```json")) {
                        jsonString = jsonString.split("```json")[1].split("```")[0].trim();
                    } else if (jsonString.includes("```")) {
                        jsonString = jsonString.split("```")[1].split("```")[0].trim();
                    }
                    
                    const feedback = JSON.parse(jsonString);
                    
                    // Store feedback
                    appState.feedback = feedback;
                    
                    // 確保所有分析步驟看起來都已完成
                    completeAnalysisSteps(() => {
                        // 延遲顯示結果，讓用戶有時間看到所有步驟已完成
                        setTimeout(() => {
                            // Display feedback
                            displayFeedback(feedback);
                            
                            // Hide loading
                            hideAiLoading();
                        }, 1000);
                    });
                } catch (error) {
                    console.error("Failed to parse Claude's response:", error);
                    console.log("Raw response:", response.content);
                    hideAiLoading();
                    alert("無法解析評分結果，請稍後再試");
                }
            }
        });

        // 完成所有分析步驟的動畫
        function completeAnalysisSteps(callback) {
            // 清除現有的計時器
            if (appState.aiAnalysisInterval) {
                clearInterval(appState.aiAnalysisInterval);
                appState.aiAnalysisInterval = null;
            }
            
            // 獲取所有步驟
            const steps = Array.from(elements.analysisSteps.children);
            
            // 設置所有步驟為已完成狀態
            steps.forEach((step, index) => {
                step.classList.remove('opacity-40');
                step.classList.add('opacity-80');
                
                const iconElement = document.getElementById(`step${index+1}-icon`);
                iconElement.classList.remove('animate-pulse-slow', 'text-gray-400', 'text-primary');
                iconElement.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="text-green-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                `;
            });
            
            // 更新狀態文字
            elements.aiStatus.textContent = "AI 老師已完成評分";
            elements.aiLoadingMessage.textContent = "正在生成評分結果...";
            
            // 執行回調
            if (callback) callback();
        }

        // Evaluate Answer
        async function evaluateAnswer(topic, answer) {
            const prompt = AI_PROMPT
                .replace('{{question}}', topic.originalDescription || topic.description)
                .replace('{{example}}', topic.exampleAnswer || '無參考答案')
                .replace('{{answer}}', answer);
                
            try {
                await window.Poe.sendUserMessage(
                    "@Claude-3.7-Sonnet " + prompt,
                    {
                        handler: "evaluation-handler",
                        stream: false,
                        openChat: false
                    }
                );
            } catch (error) {
                console.error("Error sending message to Claude:", error);
                throw error;
            }
        }

        // Display Feedback
        function displayFeedback(feedback) {
            // 設置該題目已提交過答案
            if (appState.currentTopic) {
                appState.currentTopic.hasSubmitted = true;
                // 顯示評分標準按鈕（只有在第一次提交時才有效）
                elements.showCriteriaBtn.classList.remove('hidden');
            }
            
            // Set grade
            elements.gradeDisplay.textContent = feedback.grade || '-';
            
            // Set color based on grade
            const gradeElement = elements.gradeDisplay;
            gradeElement.className = 'inline-block text-5xl font-bold p-4 rounded-full w-16 h-16 flex items-center justify-center';
            
            switch (feedback.grade) {
                case 'A':
                    gradeElement.classList.add('bg-green-100', 'text-green-800', 'dark:bg-green-900', 'dark:text-green-200');
                    break;
                case 'B':
                    gradeElement.classList.add('bg-blue-100', 'text-blue-800', 'dark:bg-blue-900', 'dark:text-blue-200');
                    break;
                case 'C':
                    gradeElement.classList.add('bg-yellow-100', 'text-yellow-800', 'dark:bg-yellow-900', 'dark:text-yellow-200');
                    break;
                case 'D':
                    gradeElement.classList.add('bg-orange-100', 'text-orange-800', 'dark:bg-orange-900', 'dark:text-orange-200');
                    break;
                case 'F':
                    gradeElement.classList.add('bg-red-100', 'text-red-800', 'dark:bg-red-900', 'dark:text-red-200');
                    break;
                default:
                    gradeElement.classList.add('bg-gray-100', 'text-gray-800', 'dark:bg-gray-700', 'dark:text-gray-200');
            }
            
            // Set comment
            elements.commentDisplay.textContent = feedback.comment || '無評語';
            
            // Set strengths
            elements.strengthsList.innerHTML = '';
            if (feedback.strengths && feedback.strengths.length > 0) {
                feedback.strengths.forEach(strength => {
                    const li = document.createElement('li');
                    li.textContent = strength;
                    elements.strengthsList.appendChild(li);
                });
            } else {
                const li = document.createElement('li');
                li.textContent = '未提供優點';
                elements.strengthsList.appendChild(li);
            }
            
            // Set improvements
            elements.improvementsList.innerHTML = '';
            if (feedback.improvements && feedback.improvements.length > 0) {
                feedback.improvements.forEach(improvement => {
                    const li = document.createElement('li');
                    li.textContent = improvement;
                    elements.improvementsList.appendChild(li);
                });
            } else {
                const li = document.createElement('li');
                li.textContent = '未提供改進建議';
                elements.improvementsList.appendChild(li);
            }
            
            // Show feedback container
            elements.feedbackContainer.classList.remove('hidden');
            
            // Scroll to feedback
            elements.feedbackContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // Export PDF - 改為顯示可打印版本
        function exportPdf() {
            if (!appState.currentTopic || !appState.feedback) return;
            
            const topic = appState.currentTopic;
            const answer = appState.currentAnswer;
            const feedback = appState.feedback;
            
            // 創建可打印的內容
            const printContent = document.createElement('div');
            printContent.className = 'fixed inset-0 bg-white text-black z-50 p-8 overflow-auto';
            printContent.style.backgroundColor = 'white';
            printContent.style.color = 'black';
            
            // 添加內容
            printContent.innerHTML = `
                <div class="max-w-4xl mx-auto">
                    <div class="flex justify-between items-center mb-6">
                        <h1 class="text-2xl font-bold">${topic.title} - 評分結果</h1>
                        <button id="close-print-view" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">
                            返回
                        </button>
                    </div>
                    <p class="mb-4 text-sm text-gray-600">若要保存此頁面，請使用瀏覽器的列印功能（Ctrl+P 或 ⌘+P）並選擇「另存為PDF」</p>
                    <hr class="my-4">
                    
                    <div class="mb-6">
                        <h2 class="text-xl font-semibold mb-2">題目描述：</h2>
                        <div class="p-4 bg-gray-100 rounded-md whitespace-pre-wrap">${topic.description}</div>
                    </div>
                    
                    <div class="mb-6">
                        <h2 class="text-xl font-semibold mb-2">學生答案：</h2>
                        <div class="p-4 bg-gray-100 rounded-md whitespace-pre-wrap">${answer}</div>
                    </div>
                    
                    <div class="mb-6">
                        <h2 class="text-xl font-semibold mb-2">評分結果：</h2>
                        <div class="flex items-center mb-4">
                            <span class="mr-2">等級：</span>
                            <span class="font-bold text-2xl">${feedback.grade}</span>
                        </div>
                        
                        <div class="mb-4">
                            <h3 class="font-medium mb-2">總評：</h3>
                            <div class="p-4 bg-gray-100 rounded-md whitespace-pre-wrap">${feedback.comment}</div>
                        </div>
                        
                        <div class="mb-4">
                            <h3 class="font-medium mb-2">優點：</h3>
                            <ul class="list-disc pl-5 space-y-1">
                                ${feedback.strengths.map(s => `<li>${s}</li>`).join('')}
                            </ul>
                        </div>
                        
                        <div>
                            <h3 class="font-medium mb-2">改進建議：</h3>
                            <ul class="list-disc pl-5 space-y-1">
                                ${feedback.improvements.map(i => `<li>${i}</li>`).join('')}
                            </ul>
                        </div>
                    </div>
                </div>
            `;
            
            // 添加到body
            document.body.appendChild(printContent);
            
            // 添加關閉按鈕事件
            document.getElementById('close-print-view').addEventListener('click', () => {
                document.body.removeChild(printContent);
            });
            
            // 提示用戶使用瀏覽器的列印功能
            setTimeout(() => {
                alert('請使用瀏覽器的列印功能（Ctrl+P 或 ⌘+P）將頁面保存為PDF');
            }, 500);
        }

        // Event Listeners
        function setupEventListeners() {
            // Unit Selection
            elements.unitSelect.addEventListener('change', () => {
                const unitId = elements.unitSelect.value;
                if (unitId) {
                    loadTopicsByUnit(unitId);
                } else {
                    elements.topicSelect.innerHTML = '<option value="">請先選擇單元</option>';
                    elements.topicSelect.disabled = true;
                    elements.topicContainer.classList.add('hidden');
                    elements.answerContainer.classList.add('hidden');
                    elements.feedbackContainer.classList.add('hidden');
                }
            });
            
            // Topic Selection
            elements.topicSelect.addEventListener('change', () => {
                const topicId = elements.topicSelect.value;
                if (topicId) {
                    loadTopic(topicId);
                } else {
                    elements.topicContainer.classList.add('hidden');
                    elements.answerContainer.classList.add('hidden');
                    elements.feedbackContainer.classList.add('hidden');
                }
            });
            
            // 顯示/隱藏提示
            elements.showHintBtn.addEventListener('click', () => {
                elements.hintContainer.classList.toggle('hidden');
                elements.showHintBtn.textContent = 
                    elements.hintContainer.classList.contains('hidden') 
                        ? '顯示提示' 
                        : '隱藏提示';
            });
            
            // 顯示/隱藏評分標準
            elements.showCriteriaBtn.addEventListener('click', () => {
                elements.gradingCriteriaContainer.classList.toggle('hidden');
                elements.showCriteriaBtn.textContent = 
                    elements.gradingCriteriaContainer.classList.contains('hidden') 
                        ? '顯示評分標準' 
                        : '隱藏評分標準';
            });
            
            // Word Count
            elements.studentAnswer.addEventListener('input', updateWordCount);
            
            // Save Draft
            elements.saveDraftBtn.addEventListener('click', saveDraft);
            
            // Submit Answer
            elements.submitAnswerBtn.addEventListener('click', submitAnswer);
            
            // Retry
            elements.retryBtn.addEventListener('click', () => {
                elements.feedbackContainer.classList.add('hidden');
                window.scrollTo({
                    top: elements.answerContainer.offsetTop - 20,
                    behavior: 'smooth'
                });
            });
            
            // Export PDF
            elements.exportPdfBtn.addEventListener('click', exportPdf);
        }

        // 提取 YouTube 影片 ID
        function extractYouTubeId(url) {
            if (!url) return null;
            
            // 嘗試不同的 YouTube URL 格式
            let videoId = null;
            
            try {
                if (url.includes('youtube.com/watch?v=')) {
                    // 標準 YouTube URL: https://www.youtube.com/watch?v=VIDEO_ID
                    const urlObj = new URL(url);
                    videoId = urlObj.searchParams.get('v');
                } else if (url.includes('youtu.be/')) {
                    // 短網址: https://youtu.be/VIDEO_ID
                    const urlParts = url.split('youtu.be/')[1].split(/[?#]/)[0];
                    videoId = urlParts;
                } else if (url.includes('youtube.com/embed/')) {
                    // 嵌入網址: https://www.youtube.com/embed/VIDEO_ID
                    videoId = url.split('youtube.com/embed/')[1].split(/[?#]/)[0];
                } else if (url.match(/youtube\.com\/v\/([^&?#]+)/)) {
                    // 舊版格式: https://www.youtube.com/v/VIDEO_ID
                    const matches = url.match(/youtube\.com\/v\/([^&?#]+)/);
                    videoId = matches[1];
                } else {
                    // 嘗試直接找 YouTube ID 格式的字串（通常為11個字符）
                    const idMatch = url.match(/([a-zA-Z0-9_-]{11})/);
                    if (idMatch) {
                        videoId = idMatch[1];
                    }
                }
            } catch (err) {
                console.error('解析 YouTube URL 時發生錯誤:', err);
                return null;
            }
            
            return videoId;
        }
        
        // 使用JSONP方式獲取Google Sheet數據
        function fetchTopicsData() {
            showBasicLoading('正在載入題目庫...');
            
            return new Promise((resolve, reject) => {
                try {
                    // 定義全局回調函數名稱
                    const callbackName = 'jsonpCallback_' + Math.random().toString(36).substr(2, 9);
                    
                    // 在全局作用域定義回調函數
                    window[callbackName] = function(response) {
                        // 數據載入完成後，刪除script標籤和回調函數
                        if (document.body.contains(script)) {
                            document.body.removeChild(script);
                        }
                        
                        clearTimeout(timeoutId); // 清除超時計時器
                        delete window[callbackName];
                        
                        try {
                            // 處理新的數據格式
                            let data;
                            if (response && response.version && response.data) {
                                // 新格式: {version: "1.1", data: [...]}
                                data = response.data;
                                console.log('從新版API獲取數據，版本:', response.version);
                            } else if (Array.isArray(response)) {
                                // 舊格式: 直接是數組
                                data = response;
                                console.log('從舊版API獲取數據');
                            } else {
                                throw new Error('未知的數據格式');
                            }
                            
                            // 檢查數據格式
                            if (Array.isArray(data) && data.length > 0) {
                                console.log('成功從Google Sheet獲取數據:', data.length + '條記錄');
                                hideBasicLoading();
                                resolve(data);
                            } else {
                                console.error('從Google Sheet獲取的數據格式不正確:', data);
                                hideBasicLoading();
                                console.log('使用預設數據');
                                resolve(testData);
                            }
                        } catch (error) {
                            console.error('處理數據時發生錯誤:', error);
                            hideBasicLoading();
                            console.log('使用預設數據');
                            resolve(testData);
                        }
                    };
                    
                    // 創建script標籤
                    const script = document.createElement('script');
                    // 添加回調參數 (callback=xxx)
                    script.src = `${GOOGLE_SCRIPT_URL}?callback=${callbackName}`;
                    
                    // 設置超時處理
                    const timeoutId = setTimeout(() => {
                        // 如果超時，刪除腳本和回調函數
                        if (document.body.contains(script)) {
                            document.body.removeChild(script);
                        }
                        delete window[callbackName];
                        
                        console.log('數據載入超時，使用預設數據');
                        hideBasicLoading();
                        
                        // 使用預設數據而不顯示錯誤彈窗，以改善用戶體驗
                        resolve(testData);
                    }, 8000); // 縮短超時時間到8秒
                    
                    // 錯誤處理
                    script.onerror = function() {
                        if (document.body.contains(script)) {
                            document.body.removeChild(script);
                        }
                        clearTimeout(timeoutId);
                        delete window[callbackName];
                        
                        console.log('數據載入失敗，使用預設數據');
                        hideBasicLoading();
                        
                        // 使用預設數據而不顯示錯誤彈窗
                        resolve(testData);
                    };
                    
                    // 添加到文檔中開始加載
                    document.body.appendChild(script);
                    
                } catch (error) {
                    console.error('獲取數據時發生錯誤:', error);
                    hideBasicLoading();
                    resolve(testData);
                }
            });
        }

        // Initialize the application
        async function init() {
            setupEventListeners();
            
            try {
                // 獲取題目數據
                const data = await fetchTopicsData();
                // 處理數據
                processData(data);
                // 初始化UI
                initializeUI();
            } catch (error) {
                console.error('初始化應用程式失敗:', error);
                // 使用測試數據作為後備
                processData(testData);
                initializeUI();
            }
        }

        // 在文檔加載完成後啟動應用程式
        document.addEventListener('DOMContentLoaded', () => {
            init();
        });
    </script>
</body>
</html>

